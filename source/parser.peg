/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */
{
	var test = {
		tasks: 1100110011,
		ip: "0x2FFD0015",
		zip: 777777,
		node: 1114,
		sn: "adf1234aa5",
		mac: "34a04b55aa55",
		model: "4200hd"
	};
	
	var utils = require("../helpers/utils");
}

start
	= main

main
	= equalCondition
	/ stringConcat
	/ leftCondition
	/ multiplicative
	/ additive
	

equalCondition
	= left:additive space "==" space right:additive { 
		console.log("RULE EQ", left, right); 
		return +(left == right); 
	}
	
leftCondition
	= left:additive space ">" space right:additive { 
		return +(left > right); 
	}
	
additive
	= left:multiplicative space "+" space right:additive { 
		console.log("RULE POSITIVE", left, right);
		return left + right;
	}
	/ left:multiplicative space "-" space right:additive { 
		console.log("RULE NEGATIVE", left, right);
		return left - right; 
	}
	/ "-" space right:additive { 
		var result = 0 - right;
		console.log("RULE NEGATIVE", right, result);
		return result; 
	}
	/ stringConcat
	/ primary

stringConcat
	= left:strings space "." space right:strings {
		var result = left + right;
		console.log("RULE CONCAT", left, right, result);
		return result;
	}

multiplicative
	= left:primary space "*" space right:multiplicative {
		var result = left*right;
		console.log("RULE MULTI: ", left, right, result);
		return result;
	}
	/ primary

primary
	= rand
	/ s:hex { return utils.decimalFromHex(s); }
	/ s:str ".hex" { return "0x" + s }
	/ s:str ".length" { return s.length }
	/ hex
	/ strings
	/ integer

strings
	= s:str "[" start:integer ":" stop:integer "]" {
		var result = s.substring(start, stop);
		//console.log("RULE SUBSTRING: ", start, stop, result);
		return result;
	}
	/ s:str "[:" stop:integer "]" {
		var result = s.substring(0, stop);
		//console.log("RULE SUBSTRING: ", 0, stop, result);
		return result; 
	}
	/ s:str "[" start:integer ":]" { return s.substring(start, s.length); }
	/ str



rand "random"
	= "rand(" space max:integer space ")" space { return utils.rand(0, max-1); }
str "string"
	= "'" s:[a-zA-Z0-9\" ]* "'" {
		var result = s.join("");
		//console.log("STRING: ", result);
		return result;
	}
tasks
	= digits:[0-9]+ { return test.tasks; }
hex "hex"
	= "0x" string:[a-zA-Z0-9]+ { return string.join(""); }
integer "integer"
	= digits:[0-9]+ { 
			console.log("INTEGER", digits); 
			return parseInt(digits.join(""), 10); 
		}
space "space"
	= sps:[ ]* { return sps; }