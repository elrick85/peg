/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */
{
	var test = require("../source/config");
	var op = function(operation, left, right){
		switch(operation){
			case "||":
			case "or":
				return +(left || right);
			case "&&":
			case "and":
				return +(left && right);
		}
	};
	
	var conditionOp = function(condition, left, right){
		switch(condition){
			case "==":
				return +(left == right);
			case "!=":
				return +(left != right);
			case ">=":
				return +(left >= right);
			case "<=":
				return +(left <= right);
			case ">":
				return +(left > right);
			case "<":
				return +(left < right);
		}
	};
	
	var digitsOp = function(op, left, right){
		switch(op){
			case "<<":
				return left << right;
			case ">>":
				return left >> right;
			case "^":
				return left ^ right;
			case "%":
				return left % right;
		}
	};
}

start = extcondition / conditions

extcondition
	= left:conditions space operation:("||" / "or" / "&&" / "and") space right:extcondition { return op(operation, left, right); }
	/ space "not" space right:conditions { return +(!right); }
	/ conditions

conditions
	= left:actions space condition:("==" / "!=" / ">=" / "<=" / ">" / "<") space right:actions { return conditionOp(condition, left, right); }
	/ actions

actions	= left:primary right:(subsubstriction / subadditive)+ {
		right.unshift(left);
		left = right.reduce(function(v,c){return v+c});
		return left;
	}
	/ primary

subadditive = space "+" space right:primary {return +right;}
subsubstriction = space "-" space right:primary {return -right;}

primary = left:primaryDigits right:(subdivision / submultiply)+ {
		right.unshift(left);
		left = right.reduce(function(v,c){return v*c});
		return left;
	}
	/ rand
	/ primaryDigits
	/ stringRules

subdivision	= space "/" space right:primaryDigits { return 1/right; }
submultiply	= space "*" space right:primaryDigits { return right; }

primaryDigits
	= s:stringRules ".hex" { return "0x" + s; }
	/ s:stringRules "." "length" { return s.length; }
	/ left:digits space operation:("<<" / ">>" / "^" / "%") space right:primary { return digitsOp(operation, left, right); }
	/ left:digits space "&" space right:digits { return left & right; }
	/ left:digits space "|" space right:digits { return left | right; }
	/ digits

digits
	= hex
	/ "-"right:(integer / integerVariables) { return 0 - right; }
	/ integer
	/ variables

substr = space "." space right:strings { return right; }
stringRules
	= left:strings right:substr* { return left + right.join(""); }
	/ strings

strings
	= s:str "[" start:integer ":" stop:integer "]" { return s.substring(start, stop); }
	/ s:str "[:" stop:integer "]" { return s.substring(0, stop);	}
	/ s:str "[" start:integer ":]" { return s.substring(start, s.length); }
	/ str

rand = "rand(" max:integer ")" {
	if(max <= 1){
		return 0;
	}
	
	return Math.floor(Math.random() * (max - 1));
}
str "string" = "'" s:([a-zA-Z0-9 ] / "''")* "'" { return s.join(""); }
hex "hex" = "0x" string:[a-zA-Z0-9]+ { return "0x" + string.join(""); }
integer "integer" = digits:[0-9]+ { return parseInt(digits.join(""), 10); }
space "space" = sps:[ ]* { return sps; }

variables
	= integerVariables
	/ variable:("ip" / "sn" / "mac" / "model") { return test[variable]; }

integerVariables = variable:("tasks" / "zip" / "node") { return test[variable]; }