/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */
{
	var test = {
		tasks: 1100110011,
		ip: "0x2FFD0015",
		zip: 777777,
		node: 1114,
		sn: "adf1234aa5",
		mac: "34a04b55aa55",
		model: "4200hd"
	};
	
	var utils = require("../helpers/utils");
}

start
	= main

main
	= leftCondition
	/ equals
	/ additive

equals
	= left:additive space "==" space right:primary { return +(left == right); }
	
leftCondition
	= left:additive space ">" space right:integer { return +(left > right); }
	
additive
	= left:primary space "+" space right:additive { return left + right; }
	/ left:primary right:negative { return left + right; }
	/ primary
	
primary
	= "rand(" space max:integer space ")" space { return utils.rand(0, max-1); }
	/ s:hex { return utils.decimalFromHex(s); }
	/ s:str "[" start:integer ":" stop:integer "]" { return s.substring(start,stop); }
	/ s:str ".length" { return s.length }
	/ s:str ".hex" { return "0x" + s }
	/ hex
	/ str
	/ negative
	/ integer


str
	= "'" string:[a-zA-Z0-9\"]+ "'" { return string.join(""); }
negative
	= "-" integer:integer { return -integer; }
tasks "integer"
	= digits:[0-9]+ { return test.tasks; }
hex
	= "0x" string:[a-zA-Z0-9]+ { return string.join(""); }
integer "integer"
	= digits:[0-9]+ { return parseInt(digits.join(""), 10); }
space
	= sps:[ ]* { return sps; }